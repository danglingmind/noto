generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model annotations {
  id               String             @id
  annotationType   AnnotationType
  target           Json?
  coordinates      Json?
  style            Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  fileId           String
  userId           String
  viewport         ViewportType?
  scrollPosition   Json?
  files            files              @relation(fields: [fileId], references: [id])
  users            users              @relation(fields: [userId], references: [id])
  comments         comments[]
  notifications    notifications[]
  task_assignments task_assignments[]
}

model comment_mentions {
  id                                            String   @id
  commentId                                     String
  mentionedUserId                               String
  mentionedBy                                   String
  createdAt                                     DateTime @default(now())
  comments                                      comments @relation(fields: [commentId], references: [id])
  users_comment_mentions_mentionedByTousers     users    @relation("comment_mentions_mentionedByTousers", fields: [mentionedBy], references: [id])
  users_comment_mentions_mentionedUserIdTousers users    @relation("comment_mentions_mentionedUserIdTousers", fields: [mentionedUserId], references: [id])

  @@unique([commentId, mentionedUserId])
}

model comments {
  id               String             @id
  text             String
  status           CommentStatus      @default(OPEN)
  createdAt        DateTime           @default(now())
  annotationId     String
  userId           String
  parentId         String?
  comment_mentions comment_mentions[]
  annotations      annotations        @relation(fields: [annotationId], references: [id])
  comments         comments?          @relation("commentsTocomments", fields: [parentId], references: [id])
  other_comments   comments[]         @relation("commentsTocomments")
  users            users              @relation(fields: [userId], references: [id])
  notifications    notifications[]
  task_assignments task_assignments[]
}

model file_tags {
  id     String @id
  fileId String
  tagId  String
  files  files  @relation(fields: [fileId], references: [id])
  tags   tags   @relation(fields: [tagId], references: [id])

  @@unique([fileId, tagId])
}

model files {
  id              String            @id
  fileName        String
  fileUrl         String
  fileType        FileType
  fileSize        Int?
  metadata        Json?
  status          FileStatus        @default(READY)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  projectId       String
  folderId        String?
  annotations     annotations[]
  file_tags       file_tags[]
  folders         folders?          @relation(fields: [folderId], references: [id])
  projects        projects          @relation(fields: [projectId], references: [id])
  shareable_links shareable_links[]
}

model folders {
  id            String    @id
  name          String
  description   String?
  color         String?
  projectId     String
  parentId      String?
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  files         files[]
  users         users     @relation(fields: [createdBy], references: [id])
  folders       folders?  @relation("foldersTofolders", fields: [parentId], references: [id])
  other_folders folders[] @relation("foldersTofolders")
  projects      projects  @relation(fields: [projectId], references: [id])
}

model notifications {
  id           String           @id
  type         NotificationType
  title        String
  message      String
  data         Json?
  userId       String
  projectId    String?
  commentId    String?
  annotationId String?
  read         Boolean          @default(false)
  readAt       DateTime?
  createdAt    DateTime         @default(now())
  annotations  annotations?     @relation(fields: [annotationId], references: [id])
  comments     comments?        @relation(fields: [commentId], references: [id])
  projects     projects?        @relation(fields: [projectId], references: [id])
  users        users            @relation(fields: [userId], references: [id])
}

model project_tags {
  id        String   @id
  projectId String
  tagId     String
  projects  projects @relation(fields: [projectId], references: [id])
  tags      tags     @relation(fields: [tagId], references: [id])

  @@unique([projectId, tagId])
}

model projects {
  id              String            @id
  name            String
  description     String?
  createdAt       DateTime          @default(now())
  workspaceId     String
  ownerId         String
  files           files[]
  folders         folders[]
  notifications   notifications[]
  project_tags    project_tags[]
  users           users             @relation(fields: [ownerId], references: [id])
  workspaces      workspaces        @relation(fields: [workspaceId], references: [id])
  shareable_links shareable_links[]
}

model shareable_links {
  id           String          @id
  token        String          @unique
  name         String?
  projectId    String?
  fileId       String?
  permissions  SharePermission @default(VIEW_ONLY)
  password     String?
  expiresAt    DateTime?
  maxViews     Int?
  viewCount    Int             @default(0)
  createdBy    String
  createdAt    DateTime        @default(now())
  lastAccessed DateTime?
  users        users           @relation(fields: [createdBy], references: [id])
  files        files?          @relation(fields: [fileId], references: [id])
  projects     projects?       @relation(fields: [projectId], references: [id])
}

model stripe_webhook_events {
  id            String   @id
  stripeEventId String   @unique
  eventType     String
  processed     Boolean  @default(false)
  data          Json?
  createdAt     DateTime @default(now())
}

model subscription_plans {
  id              String          @id
  name            String          @unique
  displayName     String
  description     String?
  price           Decimal         @db.Decimal(10, 2)
  billingInterval BillingInterval
  featureLimits   Json
  stripePriceId   String?
  stripeProductId String?
  isActive        Boolean         @default(true)
  sortOrder       Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  subscriptions   subscriptions[]
}

model subscriptions {
  id                   String             @id
  userId               String
  planId               String
  stripeSubscriptionId String?
  stripeCustomerId     String?
  status               String
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now())
  subscription_plans   subscription_plans @relation(fields: [planId], references: [id])
  users                users              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tags {
  id           String         @id
  name         String
  color        String?
  workspaceId  String
  createdBy    String
  createdAt    DateTime       @default(now())
  file_tags    file_tags[]
  project_tags project_tags[]
  users        users          @relation(fields: [createdBy], references: [id])
  workspaces   workspaces     @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, name])
}

model task_assignments {
  id                                       String       @id
  commentId                                String?
  annotationId                             String?
  assignedTo                               String
  assignedBy                               String
  title                                    String?
  description                              String?
  dueDate                                  DateTime?
  priority                                 TaskPriority @default(MEDIUM)
  status                                   TaskStatus   @default(TODO)
  createdAt                                DateTime     @default(now())
  updatedAt                                DateTime
  completedAt                              DateTime?
  annotations                              annotations? @relation(fields: [annotationId], references: [id])
  users_task_assignments_assignedByTousers users        @relation("task_assignments_assignedByTousers", fields: [assignedBy], references: [id])
  users_task_assignments_assignedToTousers users        @relation("task_assignments_assignedToTousers", fields: [assignedTo], references: [id])
  comments                                 comments?    @relation(fields: [commentId], references: [id])
}

model usage_records {
  id          String   @id
  userId      String
  workspaceId String?
  feature     String
  count       Int      @default(1)
  recordedAt  DateTime @default(now())
}

model users {
  id                                                       String              @id
  clerkId                                                  String              @unique
  email                                                    String              @unique
  name                                                     String?
  avatarUrl                                                String?
  createdAt                                                DateTime            @default(now())
  trialStartDate                                           DateTime?
  trialEndDate                                             DateTime?
  stripeCustomerId                                         String?             @unique
  annotations                                              annotations[]
  comment_mentions_comment_mentions_mentionedByTousers     comment_mentions[]  @relation("comment_mentions_mentionedByTousers")
  comment_mentions_comment_mentions_mentionedUserIdTousers comment_mentions[]  @relation("comment_mentions_mentionedUserIdTousers")
  comments                                                 comments[]
  folders                                                  folders[]
  notifications                                            notifications[]
  projects                                                 projects[]
  shareable_links                                          shareable_links[]
  subscriptions                                            subscriptions[]
  tags                                                     tags[]
  task_assignments_task_assignments_assignedByTousers      task_assignments[]  @relation("task_assignments_assignedByTousers")
  task_assignments_task_assignments_assignedToTousers      task_assignments[]  @relation("task_assignments_assignedToTousers")
  workspace_members                                        workspace_members[]
  workspace_invitations                                    workspace_invitations[]
  workspaces                                               workspaces[]
}

model workspace_members {
  id          String     @id
  role        Role
  createdAt   DateTime   @default(now())
  userId      String
  workspaceId String
  users       users      @relation(fields: [userId], references: [id])
  workspaces  workspaces @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

model workspace_plans {
  id             String   @id
  workspaceId    String
  subscriptionId String?
  tier           String   @default("FREE")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model workspace_invitations {
  id          String    @id
  token       String    @unique
  email       String
  role        Role      @default(VIEWER)
  workspaceId String
  invitedBy   String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  workspaces  workspaces @relation(fields: [workspaceId], references: [id])
  users       users     @relation(fields: [invitedBy], references: [id])
}

model workspaces {
  id                String              @id
  name              String
  createdAt         DateTime            @default(now())
  ownerId           String
  subscriptionTier  String?             @default("FREE")
  projects          projects[]
  tags              tags[]
  workspace_members workspace_members[]
  workspace_invitations workspace_invitations[]
  users             users               @relation(fields: [ownerId], references: [id])
}

enum Role {
  VIEWER
  COMMENTER
  EDITOR
  ADMIN
}

enum AnnotationType {
  PIN
  BOX
  HIGHLIGHT
  TIMESTAMP
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum CommentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

enum FileStatus {
  PENDING
  READY
  FAILED
}

enum FileType {
  IMAGE
  PDF
  VIDEO
  WEBSITE
}

enum NotificationType {
  COMMENT_ADDED
  COMMENT_REPLY
  COMMENT_MENTION
  COMMENT_RESOLVED
  ANNOTATION_ADDED
  PROJECT_SHARED
  FILE_UPLOADED
  WORKSPACE_INVITE
}

enum SharePermission {
  VIEW_ONLY
  COMMENT
  ANNOTATE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum ViewportType {
  DESKTOP
  TABLET
  MOBILE
}
